import streamlit as st
import speech_recognition as sr
import webbrowser
import openai
import os
import datetime
import random
import numpy as np
import win32com.client
import yfinance as yf


chatStr = ""

def chat(query):
    global chatStr
    openai.api_key = "sk-4tqEZni0"
    chatStr += f"Gaurang: {query}\n Jarvis: "
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=chatStr,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    speak(response["choices"][0]["text"])
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]

def ai(prompt):
    openai.api_key = "sk-4tqEZni0"
    text = f"OpenAI response for Prompt: {prompt} \n *************************\n\n"

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    text += response["choices"][0]["text"]
    if not os.path.exists("Openai"):
        os.mkdir("Openai")

    with open(f"Openai/{''.join(prompt.split('intelligence')[1:]).strip()}.txt", "w") as f:
        f.write(text)

def speak(text):
    speaker = win32com.client.Dispatch("SAPI.SPVoice")
    Speak = speaker.Speak
    Speak(text)

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio = r.listen(source)
        try:
            print("Recognizing...")
            query = r.recognize_google(audio, language="en-in")
            print(f"User said: {query}")
            return query
        except Exception as e:
            return "Some Error Occurred. Sorry from Jarvis"
        

def main():
    st.title('Jarvis A.I')

    # Initialize chatStr
    global chatStr
    chatStr = ""

    # Start Jarvis
    speak("Jarvis A.I")

    query = st.text_input('User:')
    if st.button('Send'):
        if query:
            response = ""
            sites = [["youtube", "https://www.youtube.com"], ["wikipedia", "https://www.wikipedia.com"], ["google", "https://www.google.com"]]
            for site in sites:
                if f"Open {site[0]}".lower() in query.lower():
                    speak(f"Opening {site[0]} sir...")
                    webbrowser.open(site[1])

            if "Using artificial intelligence".lower() in query.lower():
                ai(prompt=query)

            elif "Jarvis Quit".lower() in query.lower():
                exit()

            elif "reset chat".lower() in query.lower():
                chatStr = ""

            elif "managed portfolio".lower() in query.lower():
                stocks = ["RELIANCE.NS","TCS.NS","HDFCBANK.NS","HINDUNILVR.NS","INFY.NS","ICICIBANK.NS","KOTAKBANK.NS","AXISBANK.NS","LT.NS","SBIN.NS","ASIANPAINT.NS","HCLTECH.NS","WIPRO.NS","TECHM.NS","BHARTIARTL.NS","MARUTI.NS","NESTLEIND.NS","ONGC.NS","CIPLA.NS","DRREDDY.NS"]
                # Replace with your desired stock symbols
                returns_dict = {}

                for stock in stocks:
                    data = yf.Ticker(stock).history(period="1mo")  # Retrieve monthly data
                    if len(data) > 0:
                        monthly_returns = (data["Close"][-1] - data["Close"][0]) / data["Close"][0]
                        returns_dict[stock] = monthly_returns

                if returns_dict:
                    sorted_stocks = sorted(returns_dict, key=returns_dict.get, reverse=True)
                    top_stocks = sorted_stocks[:3]  # Select the top 3 stocks with highest returns

                    response = "The highest profitable stocks in your portfolio (based on monthly returns) are:\n"
                    for stock in top_stocks:
                        response += f"{stock}: {returns_dict[stock]:.2%}\n"
                else:
                    response = "No stock data available."

                speak(response)

            else:
                print("Chatting...")
                response = chat(query)
            
            st.text_area('Jarvis:', value=response)

if __name__ == '__main__':
    main()

